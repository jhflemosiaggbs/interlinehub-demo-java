name: Java CICD

on:
  push:
    branches:
      - develop

jobs:
  entrypoint:
    uses: jhflemosiaggbs/cicd-iaggbs/.github/workflows/entrypoint.yaml@develop
  
  buildAndTest:
    needs: [entryPoint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          
      - name: mvnTest
        run: mvn verify test
      
      - name: mvnPackage
        run: mvn package -DskipTests
      
  #    - name: sonarCloudScan
  #      uses: sonarsource/sonarcloud-github-action@master
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #      with:
  #        projectBaseDir: src/
  #        args: >
  #          -Dsonar.organization=jhflemos
  #          -Dsonar.projectKey=jhflemos_${{ needs.entrypoint.outputs.artifactId }}
  #          -Dsonar.projectVersion=${{ needs.entrypoint.outputs.version }}
  #          -Dsonar.coverage.jacoco.xmlReportPaths=../target/site/jacoco/jacoco.xml
  #          -Dsonar.java.binaries=../target/classes
  #          -Dsonar.coverage.exclusions=test/**
#
  #    #- name: sonarCloudQualityGate
  #    #  id: sonarqube-quality-gate-check
  #    #  uses: sonarsource/sonarqube-quality-gate-action@master
  #    #  # Force to fail step after specific time.
  #    #  timeout-minutes: 5
  #    #  env:
  #    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #    #  with:
  #    #    scanMetadataReportFile: src/.scannerwork/report-task.txt
  #          
  #    - name: registry 
  #      uses: hkusu/s3-upload-action@v2
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: 'eu-west-2'
  #        aws-bucket: 'aigcih-${{ needs.entrypoint.outputs.artifactId }}'
  #        file-path: './target/${{ needs.entrypoint.outputs.artifactId }}.jar'
  #        destination-dir: '/${{ needs.entrypoint.outputs.branchName }}/${{ needs.entrypoint.outputs.version }}'
  #
  #deployLambdaFunction:
  #  needs: [entryPoint, buildAndTest]
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: deployAWSLambda
  #    uses: appleboy/lambda-action@master
  #    with:
  #      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #      aws_region: 'eu-west-2'
  #      function_name: AIGCIH_UpdateFunctionProcess_Development
  #      s3_bucket: 'aigcih-${{ needs.entrypoint.outputs.artifactId }}'
  #      s3_key: 'artifacts/${{ needs.entrypoint.outputs.branchName }}/${{ needs.entrypoint.outputs.version }}/${{ needs.entrypoint.outputs.artifactId }}.jar'
